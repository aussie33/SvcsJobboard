# The syntax error is in the session cookie configuration
# Let's create a properly formatted server file

cat > server/index.cjs << 'EOF'
const express = require('express');
const session = require('express-session');
const MemoryStore = require('memorystore')(session);
const path = require('path');
const fs = require('fs');

console.log('Starting Career Portal server...');

const app = express();
const PORT = process.env.PORT || 5000;

app.set('trust proxy', 1);

// Session configuration
app.use(session({
  store: new MemoryStore({
    checkPeriod: 86400000,
    ttl: 86400000 * 7,
    max: 1000,
    stale: false
  }),
  secret: 'career-portal-production-secret-2024',
  resave: false,
  saveUninitialized: false,
  rolling: false,
  cookie: {
    httpOnly: true,
    maxAge: 86400000 * 7,
    sameSite: 'lax',
    secure: false,
    path: '/'
  },
  name: 'career-portal-session',
  proxy: true
}));

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// CORS headers
app.use((req, res, next) => {
  const origin = req.headers.origin;
  if (origin) {
    res.header('Access-Control-Allow-Origin', origin);
  }
  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');
  res.header('Access-Control-Allow-Credentials', 'true');
  
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// Static files
const staticPath = path.join(__dirname, '../dist/public');
if (fs.existsSync(staticPath)) {
  app.use(express.static(staticPath));
  console.log('Serving static files from:', staticPath);
}

// Load routes
async function loadRoutes() {
  try {
    const { registerRoutes } = await import('./routes.js');
    registerRoutes(app);
    console.log('Routes loaded successfully');
  } catch (error) {
    console.error('Failed to load routes:', error);
  }
}

// SPA fallback
app.get('*', (req, res) => {
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ error: 'API endpoint not found' });
  }
  
  const indexPath = path.join(staticPath, 'index.html');
  if (fs.existsSync(indexPath)) {
    res.sendFile(indexPath);
  } else {
    res.status(404).send('Application not found');
  }
});

// Start server
async function startServer() {
  await loadRoutes();
  
  app.listen(PORT, '0.0.0.0', () => {
    console.log(`Server running on port ${PORT}`);
  });
}

startServer().catch(console.error);
EOF

# Restart PM2
pm2 restart career-portal

# Wait for startup
sleep 5

# Check if server started successfully
pm2 logs career-portal --lines 5

# Test login functionality
echo "Testing login..."
curl -X POST http://localhost:5000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"username":"admin","password":"admin123"}' \
  -c /tmp/session_test.txt

# Check session persistence
echo "Testing session..."
curl -X GET http://localhost:5000/api/auth/me \
  -b /tmp/session_test.txt

rm -f /tmp/session_test.txt

# Test external access
echo "Testing external access..."
curl -I http://64.225.6.33

echo ""
echo "Login should now work properly at http://64.225.6.33"