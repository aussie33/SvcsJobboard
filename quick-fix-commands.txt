# Quick Fix Commands for DigitalOcean Server 162.243.190.66
# Run these commands directly on your server

# 1. Stop existing processes
pm2 delete career-portal 2>/dev/null || true
fuser -k 5000/tcp 2>/dev/null || true

# 2. Navigate to app directory
cd /var/www/career-portal

# 3. Update server configuration
cat > server/index.js << 'EOF'
const express = require('express');
const session = require('express-session');
const MemoryStore = require('memorystore')(session);
const path = require('path');
const fs = require('fs');

const { storage } = require('./storage');
const { registerRoutes } = require('./routes');

const app = express();
const PORT = process.env.PORT || 5000;

app.set('trust proxy', 1);

app.use(session({
  store: new MemoryStore({
    checkPeriod: 86400000,
    ttl: 86400000
  }),
  secret: 'career-portal-secret-2024',
  resave: false,
  saveUninitialized: false,
  rolling: true,
  cookie: {
    httpOnly: true,
    maxAge: 24 * 60 * 60 * 1000,
    sameSite: 'lax'
  }
}));

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Static files
const staticPath = path.join(__dirname, '../dist/public');
if (fs.existsSync(staticPath)) {
  app.use(express.static(staticPath));
} else if (fs.existsSync(path.join(__dirname, '../dist/client'))) {
  app.use(express.static(path.join(__dirname, '../dist/client')));
}

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

// Register routes
registerRoutes(app).then(() => {
  console.log('Routes registered');
}).catch(console.error);

// SPA fallback
app.get('*', (req, res) => {
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ error: 'API not found' });
  }
  
  const indexPath = fs.existsSync(staticPath) 
    ? path.join(staticPath, 'index.html')
    : path.join(__dirname, '../dist/client/index.html');
    
  if (fs.existsSync(indexPath)) {
    res.sendFile(indexPath);
  } else {
    res.status(404).send('Build not found');
  }
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server running on port ${PORT}`);
});
EOF

# 4. Create PM2 config
cat > ecosystem.config.js << 'EOF'
module.exports = {
  apps: [{
    name: 'career-portal',
    script: './server/index.js',
    instances: 1,
    autorestart: true,
    env: {
      NODE_ENV: 'production',
      PORT: 5000
    }
  }]
};
EOF

# 5. Fix build structure
mkdir -p dist/public
if [ -d "dist/client" ]; then
  cp -r dist/client/* dist/public/ 2>/dev/null || true
fi

# 6. Start application
pm2 start ecosystem.config.js
pm2 save

# 7. Check status
pm2 status
curl http://localhost:5000/health